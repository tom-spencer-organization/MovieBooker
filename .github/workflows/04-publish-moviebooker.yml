name: 04 - Publish Moviebooker

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

on:
  push:
    paths:
      - 'application/**'
      - 'cdk/**/*Service*'
      - 'cdk/pom.xml'
      - '.github/workflows/04-publish-todo-app.yml'
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 20
        uses: actions/setup-java@v3
        with:
          java-version: '20'
          distribution: 'corretto'

      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots package

      - name: Create Docker image tag
        id: dockerImageTag
        run: echo "tag=$(date +'%Y%m%d%H%M%S')-${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Publish Docker image to ECR registry
        if: github.ref == 'refs/heads/main' || contains(github.event.head_commit.message, 'DEPLOY NOW')
        env:
          DOCKER_IMAGE_TAG: ${{ steps.dockerImageTag.outputs.tag }}
        run: |
          docker build -t moviebooker-app .
          docker tag moviebooker-app ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/moviebooker-app:${DOCKER_IMAGE_TAG}
          docker tag moviebooker-app ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/moviebooker-app:latest
          aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/moviebooker-app:${DOCKER_IMAGE_TAG}
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/moviebooker-app:latest
  deploy:
    runs-on: ubuntu-20.04
    name: Deploy Moviebooker app
    needs: build-and-publish
    timeout-minutes: 15
    if: github.ref == 'refs/heads/main' || contains(github.event.head_commit.message, 'DEPLOY NOW')
    concurrency: moviebooker-application-deployment
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 20
        uses: actions/setup-java@v3
        with:
          java-version: '20'
          distribution: 'corretto'

      - name: Set up Node 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: NPM install
        working-directory: cdk
        run: npm install

      - name: Deploy service stack
        working-directory: cdk
        run: npm run service:deploy -- -c dockerImageTag=${{ needs.build-and-publish.outputs.dockerImageTag }}

      # Each Service stack updates creates a new parameter stack that CloudFormation does not clean up for us.
      # This step deletes all "*Service-Parameters*" stacks except the latest one to keep the house clean.
      - name: Clean up old parameter stacks
        working-directory: cdk
        run: |
          aws cloudformation describe-stacks --region eu-central-1 --query "Stacks[].StackName" --output text | sed -e "s/\s\+/\n/g" | grep -e "staging-todo-app-Service-Parameters" | sort -r | tail -n+2 > stacks_to_be_deleted.txt
          for stack in $(cat stacks_to_be_deleted.txt); do aws cloudformation delete-stack --stack-name $stack --region eu-central-1;  done
